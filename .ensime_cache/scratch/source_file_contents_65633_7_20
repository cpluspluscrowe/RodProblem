import collection.mutable.Stack
import org.scalatest._
import Matchers._

class StackSpec extends FlatSpec {
  "simple assert" should "work" in {
    assert(1 === 1)
  }

  "should concat lists correctly" should "be right" in {
    val list1 = List(1)
    val list2 = List(2)
    val combined = list1 ::: list2
    assert(combined.equals(List(1, 2)))
  }

  "map concat" should "be correct" in {
    var map1: Map[Int, Int] = Map(1 -> 2)
    val map2: Map[Int, Int] = Map(3 -> 4)
    map1 ++= map2
    assert(map1 === Map(1 -> 2, 3 -> 4))
  }

  "cut pieces" should "work" in {
    try {
      Pieces.cutPiece(5, 6) == List(5)
    } catch {
      case e: Exception => e.getMessage shouldEqual "5 was not greater than 6"
    }

    try {
      Pieces.cutPiece(6, 6)
    } catch {
      case e: Exception => e.getMessage shouldEqual "6 was not greater than 6"
    }
    assert(Pieces.cutPiece(7, 6) == List(1, 6))
  }

  "hash list" should "work" in {
    assert(Pieces.getPiecesHash(List(1, 2, 3)) === "1-2-3")
  }

  "cutting into pieces" should "be simple" in {
    assert(true)
  }
  "map" should "return correct value" in {
    val map: Map[Long, Long] = Map(1L -> 2L)
    assert(map(1) === 2)
  }
  "value" should "be contained in map" in {
    val map: Map[Long, Long] = Map(1L -> 2L)
    assert(map.contains(1) === true)
  }
  "cutRod" should "set correct hashes" in {
    assert(true)
  }
  "addToMap" should "append values to the map" in {
    val map = Map("one" -> 2L)
    assert(
      Pieces.addToMap(map, "three" -> 4L).equals(Map("one" -> 2, "three" -> 4)))
  }
  "calculate price" should "work with an empty map" in {
    val prices: Map[String, Long] = Pieces.cutRod(List(1), List(1), 0L, Map())
    assert(prices.equals(Map()))
  }
  "calculate price" should "return cut length and prices" in {
    val prices: Map[String, Long] = Pieces.cutRod(List(2), List(1), 0L, Map())
    assert(prices === Map("1" -> 2L)))
  }
}

object Pieces {
  def cutRod(passedPieces: List[Long],
             cutLengths: List[Long],
             pieceToRemove: Long,
             hashToPrice: Map[String, Long]): Map[String, Long] = {
    val pieces = passedPieces diff List(pieceToRemove)
    if (hashToPrice.contains(getPiecesHash(pieces))) {
      return hashToPrice
    }
    for (pieceLength <- pieces) {
      for (cutSize <- cutLengths) {
        if (pieceLength > cutSize) {
          cutRod(pieces ::: cutPiece(pieceLength, cutSize),
                 cutLengths,
                 pieceLength,
                 addToMap(hashToPrice,
                          Pieces.getPiecesHash(pieces: List[Long]) -> 1))
        }
      }
    }
    return hashToPrice
  }
  def calculatePrice(summedPrice: Long,
                     piecesIndex: Int,
                     pieces: List[Long],
                     lengthToPrice: Map[Long, Long]): Long = {
    if (piecesIndex == pieces.size) {
      return summedPrice
    }
    if (lengthToPrice.contains(pieces(piecesIndex))) {
      return calculatePrice(summedPrice + lengthToPrice(pieces(piecesIndex)),
                            piecesIndex + 1,
                            pieces,
                            lengthToPrice)
    } else {
      return calculatePrice(summedPrice, piecesIndex + 1, pieces, lengthToPrice)
    }
  }
  def addToMap(map: Map[String, Long],
               hashToAdd: (String, Long)): Map[String, Long] = {
    map + hashToAdd
  }

  def cutPiece(pieceLength: Long, cutSize: Long): List[Long] = {
    assert(pieceLength > cutSize)
    val piece1Length = pieceLength - cutSize
    val piece2Length = cutSize
    return List(piece1Length, piece2Length)
    return List(pieceLength)
  }
  def getPiecesHash(pieces: List[Long]): String = {
    pieces mkString "-"
  }
}
